commit 621d0f094af822e38eee3588aae2f9f0c6f322dc
Author: Jocelyn Turcotte <jturcotte@woboq.com>
Date:   Thu Jul 9 21:52:43 2015 +0200

    Add WebEngineView.backgroundColor
    
    This also allows setting a transparent color.
    
    Task-number: QTBUG-41960

diff --git a/src/core/common/qt_messages.h b/src/core/common/qt_messages.h
index c692ee5..25a995b 100644
--- a/qtwebengine/src/core/common/qt_messages.h
+++ b/qtwebengine/src/core/common/qt_messages.h
@@ -31,6 +31,9 @@ IPC_MESSAGE_ROUTED1(QtRenderViewObserver_FetchDocumentMarkup,
 IPC_MESSAGE_ROUTED1(QtRenderViewObserver_FetchDocumentInnerText,
                     uint64 /* requestId */)
 
+IPC_MESSAGE_ROUTED1(QtRenderViewObserver_SetBackgroundColor,
+                    uint32 /* color */)
+
 IPC_MESSAGE_ROUTED1(WebChannelIPCTransport_Message, std::vector<char> /*binaryJSON*/)
 
 // User scripts messages
diff --git a/src/core/renderer/qt_render_view_observer.cpp b/src/core/renderer/qt_render_view_observer.cpp
index 83534da..ba91e54 100644
--- a/qtwebengine/src/core/renderer/qt_render_view_observer.cpp
+++ b/qtwebengine/src/core/renderer/qt_render_view_observer.cpp
@@ -65,6 +65,11 @@ void QtRenderViewObserver::onFetchDocumentInnerText(quint64 requestId)
         render_view()->GetWebView()->mainFrame()->contentAsText(std::numeric_limits<std::size_t>::max())));
 }
 
+void QtRenderViewObserver::onSetBackgroundColor(quint32 color)
+{
+    render_view()->GetWebView()->setBaseBackgroundColor(color);
+}
+
 void QtRenderViewObserver::OnFirstVisuallyNonEmptyLayout()
 {
     Send(new QtRenderViewObserverHost_DidFirstVisuallyNonEmptyLayout(routing_id()));
@@ -76,6 +81,7 @@ bool QtRenderViewObserver::OnMessageReceived(const IPC::Message& message)
     IPC_BEGIN_MESSAGE_MAP(QtRenderViewObserver, message)
         IPC_MESSAGE_HANDLER(QtRenderViewObserver_FetchDocumentMarkup, onFetchDocumentMarkup)
         IPC_MESSAGE_HANDLER(QtRenderViewObserver_FetchDocumentInnerText, onFetchDocumentInnerText)
+        IPC_MESSAGE_HANDLER(QtRenderViewObserver_SetBackgroundColor, onSetBackgroundColor)
         IPC_MESSAGE_UNHANDLED(handled = false)
     IPC_END_MESSAGE_MAP()
     return handled;
diff --git a/src/core/renderer/qt_render_view_observer.h b/src/core/renderer/qt_render_view_observer.h
index cb77cd0..3f7829a 100644
--- a/qtwebengine/src/core/renderer/qt_render_view_observer.h
+++ b/qtwebengine/src/core/renderer/qt_render_view_observer.h
@@ -47,6 +47,7 @@ public:
 private:
     void onFetchDocumentMarkup(quint64 requestId);
     void onFetchDocumentInnerText(quint64 requestId);
+    void onSetBackgroundColor(quint32 color);
 
     void OnFirstVisuallyNonEmptyLayout() Q_DECL_OVERRIDE;
 
diff --git a/src/core/type_conversion.h b/src/core/type_conversion.h
index 66fcd4d..ab63971 100644
--- a/qtwebengine/src/core/type_conversion.h
+++ b/qtwebengine/src/core/type_conversion.h
@@ -122,6 +122,13 @@ inline QColor toQt(const SkColor &c)
     return QColor(SkColorGetR(c), SkColorGetG(c), SkColorGetB(c), SkColorGetA(c));
 }
 
+inline SkColor toSk(const QColor &c)
+{
+    int r, g, b, a;
+    c.getRgb(&r, &g, &b, &a);
+    return SkColorSetARGB(a, r, g, b);
+}
+
 inline QMatrix4x4 toQt(const SkMatrix44 &m)
 {
     QMatrix4x4 qtMatrix(
diff --git a/src/core/web_contents_adapter.cpp b/src/core/web_contents_adapter.cpp
index 8c13035..4194253 100644
--- a/qtwebengine/src/core/web_contents_adapter.cpp
+++ b/qtwebengine/src/core/web_contents_adapter.cpp
@@ -676,6 +676,18 @@ qreal WebContentsAdapter::currentZoomFactor() const
     return content::ZoomLevelToZoomFactor(content::HostZoomMap::GetZoomLevel(d->webContents.get()));
 }
 
+void WebContentsAdapter::setBackgroundColor(const QColor &color)
+{
+    Q_D(WebContentsAdapter);
+    d->webContentsDelegate->setBackgroundColor(color);
+}
+
+QColor WebContentsAdapter::backgroundColor() const
+{
+    Q_D(const WebContentsAdapter);
+    return d->webContentsDelegate->backgroundColor();
+}
+
 BrowserContextQt* WebContentsAdapter::browserContext()
 {
     Q_D(WebContentsAdapter);
diff --git a/src/core/web_contents_adapter.h b/src/core/web_contents_adapter.h
index 5ea55c1..af18b3e 100644
--- a/qtwebengine/src/core/web_contents_adapter.h
+++ b/qtwebengine/src/core/web_contents_adapter.h
@@ -104,6 +104,8 @@ public:
     void serializeNavigationHistory(QDataStream &output);
     void setZoomFactor(qreal);
     qreal currentZoomFactor() const;
+    void setBackgroundColor(const QColor &color);
+    QColor backgroundColor() const;
     void filesSelectedInChooser(const QStringList &fileList, WebContentsAdapterClient::FileChooserMode);
     void runJavaScript(const QString &javaScript);
     quint64 runJavaScriptCallbackResult(const QString &javaScript);
diff --git a/src/core/web_contents_delegate_qt.cpp b/src/core/web_contents_delegate_qt.cpp
index f9db91b..3dd122c 100644
--- a/qtwebengine/src/core/web_contents_delegate_qt.cpp
+++ b/qtwebengine/src/core/web_contents_delegate_qt.cpp
@@ -40,6 +40,7 @@
 
 #include "web_contents_delegate_qt.h"
 
+#include "common/qt_messages.h"
 #include "browser_context_adapter.h"
 #include "media_capture_devices_dispatcher.h"
 #include "type_conversion.h"
@@ -78,11 +79,23 @@ static WebContentsAdapterClient::JavaScriptConsoleMessageLevel mapToJavascriptCo
 WebContentsDelegateQt::WebContentsDelegateQt(content::WebContents *webContents, WebContentsAdapterClient *adapterClient)
     : m_viewClient(adapterClient)
     , m_lastReceivedFindReply(0)
+    , m_backgroundColor(Qt::white)
 {
     webContents->SetDelegate(this);
     Observe(webContents);
 }
 
+void WebContentsDelegateQt::setBackgroundColor(const QColor &color)
+{
+    // This sends that value directly to the blink's FrameView through IPC.
+    // This is different from RenderWidgetHostView::SetBackgroundColor which seems to
+    // be intended to be the color to use when no web contents is available. That info
+    // is actually not used by our compositor so let's just avoid it.
+    Send(new QtRenderViewObserver_SetBackgroundColor(routing_id(), toSk(color)));
+    // Keep a copy to refresh in RenderViewCreated.
+    m_backgroundColor = color;
+}
+
 content::WebContents *WebContentsDelegateQt::OpenURLFromTab(content::WebContents *source, const content::OpenURLParams &params)
 {
     content::WebContents *target = source;
@@ -143,6 +156,13 @@ void WebContentsDelegateQt::HandleKeyboardEvent(content::WebContents *, const co
         m_viewClient->unhandledKeyEvent(reinterpret_cast<QKeyEvent *>(event.os_event));
 }
 
+void WebContentsDelegateQt::RenderViewCreated(content::RenderViewHost* render_view_host)
+{
+    // This has to be sent through the render_view_host since, at this point,
+    // the WebContens is still bound to the previous view's render process.
+    render_view_host->Send(new QtRenderViewObserver_SetBackgroundColor(render_view_host->GetRoutingID(), toSk(m_backgroundColor)));
+}
+
 void WebContentsDelegateQt::DidStartProvisionalLoadForFrame(content::RenderFrameHost* render_frame_host, const GURL& validated_url, bool is_error_page, bool is_iframe_srcdoc)
 {
     if (is_error_page) {
diff --git a/src/core/web_contents_delegate_qt.h b/src/core/web_contents_delegate_qt.h
index 254177d..cfa320e 100644
--- a/qtwebengine/src/core/web_contents_delegate_qt.h
+++ b/qtwebengine/src/core/web_contents_delegate_qt.h
@@ -43,6 +43,7 @@
 #include "base/callback.h"
 
 #include "javascript_dialog_manager_qt.h"
+#include <QColor>
 #include <QtCore/qcompilerdetection.h>
 
 QT_FORWARD_DECLARE_CLASS(CertificateErrorController)
@@ -69,6 +70,8 @@ public:
     QString lastSearchedString() const { return m_lastSearchedString; }
     void setLastSearchedString(const QString &s) { m_lastSearchedString = s; }
     int lastReceivedFindReply() const { return m_lastReceivedFindReply; }
+    QColor backgroundColor() const { return m_backgroundColor; }
+    void setBackgroundColor(const QColor &color);
 
     // WebContentsDelegate overrides
     virtual content::WebContents *OpenURLFromTab(content::WebContents *source, const content::OpenURLParams &params) Q_DECL_OVERRIDE;
@@ -91,6 +94,7 @@ public:
     virtual void MoveValidationMessage(content::WebContents *web_contents, const gfx::Rect &anchor_in_root_view) Q_DECL_OVERRIDE;
 
     // WebContentsObserver overrides
+    virtual void RenderViewCreated(content::RenderViewHost* render_view_host) Q_DECL_OVERRIDE;
     virtual void DidStartProvisionalLoadForFrame(content::RenderFrameHost *render_frame_host, const GURL &validated_url, bool is_error_page, bool is_iframe_srcdoc) Q_DECL_OVERRIDE;
     virtual void DidCommitProvisionalLoadForFrame(content::RenderFrameHost *render_frame_host, const GURL &url, ui::PageTransition transition_type) Q_DECL_OVERRIDE;
     virtual void DidFailProvisionalLoad(content::RenderFrameHost *render_frame_host, const GURL &validated_url, int error_code, const base::string16 &error_description) Q_DECL_OVERRIDE;
@@ -113,6 +117,7 @@ private:
     WebContentsAdapterClient *m_viewClient;
     QString m_lastSearchedString;
     int m_lastReceivedFindReply;
+    QColor m_backgroundColor;
     QList<int64> m_loadingErrorFrameList;
 };
 
diff --git a/src/webengine/api/qquickwebengineview.cpp b/src/webengine/api/qquickwebengineview.cpp
index 7405cae..1288a98 100644
--- a/qtwebengine/src/webengine/api/qquickwebengineview.cpp
+++ b/qtwebengine/src/webengine/api/qquickwebengineview.cpp
@@ -858,6 +858,23 @@ qreal QQuickWebEngineView::zoomFactor() const
     return d->adapter->currentZoomFactor();
 }
 
+QColor QQuickWebEngineView::backgroundColor() const
+{
+    Q_D(const QQuickWebEngineView);
+    if (!d->adapter)
+        return Qt::white;
+    return d->adapter->backgroundColor();
+}
+
+void QQuickWebEngineView::setBackgroundColor(const QColor &color)
+{
+    Q_D(QQuickWebEngineView);
+    d->ensureContentsAdapter();
+    if (color == d->adapter->backgroundColor())
+        return;
+    d->adapter->setBackgroundColor(color);
+    emit backgroundColorChanged();
+}
 
 bool QQuickWebEngineView::isFullScreen() const
 {
diff --git a/src/webengine/api/qquickwebengineview_p.h b/src/webengine/api/qquickwebengineview_p.h
index 40299c1..868f5a8 100644
--- a/qtwebengine/src/webengine/api/qquickwebengineview_p.h
+++ b/qtwebengine/src/webengine/api/qquickwebengineview_p.h
@@ -84,6 +84,8 @@ class Q_WEBENGINE_PRIVATE_EXPORT QQuickWebEngineView : public QQuickItem {
     Q_PROPERTY(bool canGoForward READ canGoForward NOTIFY urlChanged)
     Q_PROPERTY(bool isFullScreen READ isFullScreen NOTIFY isFullScreenChanged REVISION 1)
     Q_PROPERTY(qreal zoomFactor READ zoomFactor WRITE setZoomFactor NOTIFY zoomFactorChanged REVISION 1)
+    // FIXME: Increase rev for 5.6
+    Q_PROPERTY(QColor backgroundColor READ backgroundColor WRITE setBackgroundColor NOTIFY backgroundColorChanged REVISION 1)
     Q_PROPERTY(QQuickWebEngineProfile *profile READ profile WRITE setProfile NOTIFY profileChanged FINAL REVISION 1)
     Q_PROPERTY(QQuickWebEngineSettings *settings READ settings REVISION 1)
     Q_PROPERTY(QQuickWebEngineHistory *navigationHistory READ navigationHistory CONSTANT FINAL REVISION 1)
@@ -118,6 +120,8 @@ public:
     bool isFullScreen() const;
     qreal zoomFactor() const;
     void setZoomFactor(qreal arg);
+    QColor backgroundColor() const;
+    void setBackgroundColor(const QColor &color);
 
     QQuickWebEngineViewExperimental *experimental() const;
 
@@ -230,6 +234,8 @@ Q_SIGNALS:
     Q_REVISION(1) void zoomFactorChanged(qreal arg);
     Q_REVISION(1) void profileChanged();
     Q_REVISION(1) void webChannelChanged();
+    // FIXME: Increase rev for 5.6
+    Q_REVISION(1) void backgroundColorChanged();
 
 
 protected:

