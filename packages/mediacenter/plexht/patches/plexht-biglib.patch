diff -u a/lib/CMakeLists.txt b/lib/CMakeLists.txt
--- a/lib/CMakeLists.txt	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/CMakeLists.txt	2015-03-12 20:48:08.850096999 +0100
@@ -6,7 +6,7 @@
   add_subdirectory(libdvd)
 endif()
 
-if(TARGET_COMMON_LINUX OR TARGET_FREEBSD)
+if(TARGET_COMMON_LINUX)
   add_subdirectory(xbmc-dll-symbols)
 endif()
 
diff -u a/lib/DllAvCodec.h b/lib/DllAvCodec.h
--- a/lib/DllAvCodec.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllAvCodec.h	2015-03-12 20:48:25.110096999 +0100
@@ -43,21 +43,7 @@
 #endif
 
 #if (defined USE_EXTERNAL_FFMPEG)
-  #if (defined HAVE_LIBAVCODEC_AVCODEC_H)
-    #include <libavcodec/avcodec.h>
-    #if (defined HAVE_LIBAVCODEC_OPT_H)
-      #include <libavcodec/opt.h>
-    #endif
-    #if (defined AVPACKET_IN_AVFORMAT)
-      #include <libavformat/avformat.h>
-    #endif
-  #elif (defined HAVE_FFMPEG_AVCODEC_H)
-    #include <ffmpeg/avcodec.h>
-    #include <ffmpeg/opt.h>
-    #if (defined AVPACKET_IN_AVFORMAT)
-      #include <ffmpeg/avformat.h>
-    #endif
-  #endif
+  #include <libavcodec/avcodec.h>
 #else
   #include "libavcodec/avcodec.h"
 #endif
@@ -72,8 +58,8 @@
   virtual void avcodec_register_all(void)=0;
   virtual void avcodec_flush_buffers(AVCodecContext *avctx)=0;
   virtual int avcodec_open2_dont_call(AVCodecContext *avctx, AVCodec *codec, AVDictionary **options)=0;
-  virtual AVCodec *avcodec_find_decoder(enum CodecID id)=0;
-  virtual AVCodec *avcodec_find_encoder(enum CodecID id)=0;
+  virtual AVCodec *avcodec_find_decoder(enum AVCodecID id)=0;
+  virtual AVCodec *avcodec_find_encoder(enum AVCodecID id)=0;
   virtual int avcodec_close_dont_call(AVCodecContext *avctx)=0;
   virtual AVFrame *avcodec_alloc_frame(void)=0;
   virtual int avpicture_fill(AVPicture *picture, uint8_t *ptr, PixelFormat pix_fmt, int width, int height)=0;
@@ -129,8 +115,8 @@
   }
   virtual int avcodec_open2_dont_call(AVCodecContext *avctx, AVCodec *codec, AVDictionary **options) { *(volatile int *)0x0 = 0; return 0; }
   virtual int avcodec_close_dont_call(AVCodecContext *avctx) { *(volatile int *)0x0 = 0; return 0; }
-  virtual AVCodec *avcodec_find_decoder(enum CodecID id) { return ::avcodec_find_decoder(id); }
-  virtual AVCodec *avcodec_find_encoder(enum CodecID id) { return ::avcodec_find_encoder(id); }
+  virtual AVCodec *avcodec_find_decoder(enum AVCodecID id) { return ::avcodec_find_decoder(id); }
+  virtual AVCodec *avcodec_find_encoder(enum AVCodecID id) { return ::avcodec_find_encoder(id); }
   virtual int avcodec_close(AVCodecContext *avctx)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
@@ -210,8 +196,8 @@
   LOAD_SYMBOLS();
 
   DEFINE_METHOD0(void, avcodec_register_all_dont_call)
-  DEFINE_METHOD1(AVCodec*, avcodec_find_decoder, (enum CodecID p1))
-  DEFINE_METHOD1(AVCodec*, avcodec_find_encoder, (enum CodecID p1))
+  DEFINE_METHOD1(AVCodec*, avcodec_find_decoder, (enum AVCodecID p1))
+  DEFINE_METHOD1(AVCodec*, avcodec_find_encoder, (enum AVCodecID p1))
   DEFINE_METHOD1(int, avcodec_close_dont_call, (AVCodecContext *p1))
   DEFINE_METHOD0(AVFrame*, avcodec_alloc_frame)
   DEFINE_METHOD5(int, avpicture_fill, (AVPicture *p1, uint8_t *p2, PixelFormat p3, int p4, int p5))
diff -u a/lib/DllAvFilter.h b/lib/DllAvFilter.h
--- a/lib/DllAvFilter.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllAvFilter.h	2015-03-12 20:48:25.110096999 +0100
@@ -42,29 +42,41 @@
 #endif
 
 #if (defined USE_EXTERNAL_FFMPEG)
-  #if (defined HAVE_LIBAVFILTER_AVFILTER_H)
-    #include <libavfilter/avfiltergraph.h>
-    #include <libavfilter/buffersink.h>
-    #include <libavfilter/avcodec.h>
-  #elif (defined HAVE_FFMPEG_AVFILTER_H)
-    #include <ffmpeg/avfiltergraph.h>
-    #include <ffmpeg/buffersink.h>
-    #include <ffmpeg/avcodec.h>
-  #endif
+  #include <libavfilter/avfilter.h>
+  #include <libavfilter/avfiltergraph.h>
+  #include <libavfilter/buffersink.h>
+#if LIBAVFILTER_VERSION_MICRO >= 100 && LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,43,100)
+  #include <libavfilter/avcodec.h>
+#endif
+  #include <libavfilter/buffersrc.h>
 #else
+  #include "libavfilter/avfilter.h"
   #include "libavfilter/avfiltergraph.h"
   #include "libavfilter/buffersink.h"
+#if LIBAVFILTER_VERSION_MICRO >= 100 && LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,43,100)
   #include "libavfilter/avcodec.h"
 #endif
+  #include "libavfilter/buffersrc.h"
+#endif
 }
 
+#if LIBAVFILTER_VERSION_MICRO >= 100
+  #define LIBAVFILTER_FROM_FFMPEG
+#else
+  #define LIBAVFILTER_FROM_LIBAV
+#endif
+
+#if ( defined(LIBAVFILTER_FROM_FFMPEG) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,43,100)) || \
+    ( defined(LIBAVFILTER_FROM_LIBAV) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,5,0))
+#define LIBAVFILTER_AVFRAME_BASED
+#endif
+
 #include "threads/SingleLock.h"
 
 class DllAvFilterInterface
 {
 public:
   virtual ~DllAvFilterInterface() {}
-  virtual int avfilter_open(AVFilterContext **filter_ctx, AVFilter *filter, const char *inst_name)=0;
   virtual void avfilter_free(AVFilterContext *filter)=0;
   virtual void avfilter_graph_free(AVFilterGraph **graph)=0;
   virtual int avfilter_graph_create_filter(AVFilterContext **filt_ctx, AVFilter *filt, const char *name, const char *args, void *opaque, AVFilterGraph *graph_ctx)=0;
@@ -72,18 +84,33 @@
   virtual AVFilterGraph *avfilter_graph_alloc(void)=0;
   virtual AVFilterInOut *avfilter_inout_alloc()=0;
   virtual void avfilter_inout_free(AVFilterInOut **inout)=0;
+#if defined(HAVE_AVFILTER_GRAPH_PARSE_PTR)
+  virtual int avfilter_graph_parse_ptr(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)=0;
+#elif defined(AVFILTER_GRAPH_PARSE_TAKES_PTR_PTR_ARG)
   virtual int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)=0;
+#else
+  virtual int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut *inputs, AVFilterInOut *outputs, void *log_ctx)=0;
+#endif
   virtual int avfilter_graph_config(AVFilterGraph *graphctx, void *log_ctx)=0;
-#if LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,0,0)
-  virtual int av_vsrc_buffer_add_frame(AVFilterContext *buffer_filter, AVFrame *frame, int flags)=0;
+#if (defined(LIBAVFILTER_FROM_LIBAV) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,5,0)) || \
+    (defined(LIBAVFILTER_FROM_FFMPEG) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,43,100))
+  virtual int av_buffersrc_add_frame(AVFilterContext *buffer_filter, AVFrame *frame)=0;
 #else
   virtual int av_buffersrc_add_frame(AVFilterContext *buffer_filter, AVFrame *frame, int flags)=0;
 #endif
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   virtual void avfilter_unref_buffer(AVFilterBufferRef *ref)=0;
+#endif
   virtual int avfilter_link(AVFilterContext *src, unsigned srcpad, AVFilterContext *dst, unsigned dstpad)=0;
+#if defined(LIBAVFILTER_AVFRAME_BASED)
+  virtual int av_buffersink_get_frame(AVFilterContext *ctx, AVFrame *frame) = 0;
+#else
   virtual int av_buffersink_get_buffer_ref(AVFilterContext *buffer_sink, AVFilterBufferRef **bufref, int flags)=0;
+#endif
   virtual AVBufferSinkParams *av_buffersink_params_alloc()=0;
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   virtual int av_buffersink_poll_frame(AVFilterContext *ctx)=0;
+#endif
 };
 
 #if (defined USE_EXTERNAL_FFMPEG) || (defined TARGET_DARWIN)
@@ -92,11 +119,6 @@
 {
 public:
   virtual ~DllAvFilter() {}
-  virtual int avfilter_open(AVFilterContext **filter_ctx, AVFilter *filter, const char *inst_name)
-  {
-    CSingleLock lock(DllAvCodec::m_critSection);
-    return ::avfilter_open(filter_ctx, filter, inst_name);
-  }
   virtual void avfilter_free(AVFilterContext *filter)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
@@ -125,25 +147,48 @@
     CSingleLock lock(DllAvCodec::m_critSection);
     ::avfilter_inout_free(inout);
   }
+#if defined(HAVE_AVFILTER_GRAPH_PARSE_PTR)
+  virtual int avfilter_graph_parse_ptr(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)
+  {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    return ::avfilter_graph_parse_ptr(graph, filters, inputs, outputs, log_ctx);
+  }
+#elif defined(AVFILTER_GRAPH_PARSE_TAKES_PTR_PTR_ARG)
   virtual int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
     return ::avfilter_graph_parse(graph, filters, inputs, outputs, log_ctx);
   }
+#else
+  virtual int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut *inputs, AVFilterInOut *outputs, void *log_ctx)
+  {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    return ::avfilter_graph_parse(graph, filters, inputs, outputs, log_ctx);
+  }
+#endif
   virtual int avfilter_graph_config(AVFilterGraph *graphctx, void *log_ctx)
   {
     return ::avfilter_graph_config(graphctx, log_ctx);
   }
-#if LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,0,0)
-  virtual int av_vsrc_buffer_add_frame(AVFilterContext *buffer_filter, AVFrame *frame, int flags) { return ::av_vsrc_buffer_add_frame(buffer_filter, frame, flags); }
+#if (defined(LIBAVFILTER_FROM_LIBAV) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,5,0)) || \
+    (defined(LIBAVFILTER_FROM_FFMPEG) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,43,100))
+  virtual int av_buffersrc_add_frame(AVFilterContext *buffer_filter, AVFrame* frame) { return ::av_buffersrc_add_frame(buffer_filter, frame); }
 #else
   virtual int av_buffersrc_add_frame(AVFilterContext *buffer_filter, AVFrame* frame, int flags) { return ::av_buffersrc_add_frame(buffer_filter, frame, flags); }
 #endif
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   virtual void avfilter_unref_buffer(AVFilterBufferRef *ref) { ::avfilter_unref_buffer(ref); }
+#endif
   virtual int avfilter_link(AVFilterContext *src, unsigned srcpad, AVFilterContext *dst, unsigned dstpad) { return ::avfilter_link(src, srcpad, dst, dstpad); }
+#if defined(LIBAVFILTER_AVFRAME_BASED)
+  virtual int av_buffersink_get_frame(AVFilterContext *ctx, AVFrame *frame) { return ::av_buffersink_get_frame(ctx, frame); }
+#else
   virtual int av_buffersink_get_buffer_ref(AVFilterContext *buffer_sink, AVFilterBufferRef **bufref, int flags) { return ::av_buffersink_get_buffer_ref(buffer_sink, bufref, flags); }
+#endif
   virtual AVBufferSinkParams *av_buffersink_params_alloc() { return ::av_buffersink_params_alloc(); }
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   virtual int av_buffersink_poll_frame(AVFilterContext *ctx) { return ::av_buffersink_poll_frame(ctx); }
+#endif
   // DLL faking.
   virtual bool ResolveExports() { return true; }
   virtual bool Load() {
@@ -161,7 +206,6 @@
 
   LOAD_SYMBOLS()
 
-  DEFINE_METHOD3(int, avfilter_open_dont_call, (AVFilterContext **p1, AVFilter *p2, const char *p3))
   DEFINE_METHOD1(void, avfilter_free_dont_call, (AVFilterContext *p1))
   DEFINE_METHOD1(void, avfilter_graph_free_dont_call, (AVFilterGraph **p1))
   DEFINE_METHOD0(void, avfilter_register_all_dont_call)
@@ -170,21 +214,35 @@
   DEFINE_METHOD0(AVFilterGraph*, avfilter_graph_alloc)
   DEFINE_METHOD0(AVFilterInOut*, avfilter_inout_alloc_dont_call)
   DEFINE_METHOD1(void, avfilter_inout_free_dont_call, (AVFilterInOut **p1))
+#if defined(HAVE_AVFILTER_GRAPH_PARSE_PTR)
+  DEFINE_FUNC_ALIGNED5(int, __cdecl, avfilter_graph_parse_ptr_dont_call, AVFilterGraph *, const char *, AVFilterInOut **, AVFilterInOut **, void *)
+#elif defined(AVFILTER_GRAPH_PARSE_TAKES_PTR_PTR_ARG)
   DEFINE_FUNC_ALIGNED5(int, __cdecl, avfilter_graph_parse_dont_call, AVFilterGraph *, const char *, AVFilterInOut **, AVFilterInOut **, void *)
+#else
+  DEFINE_FUNC_ALIGNED5(int, __cdecl, avfilter_graph_parse_dont_call, AVFilterGraph *, const char *, AVFilterInOut *, AVFilterInOut *, void *)
+#endif
   DEFINE_FUNC_ALIGNED2(int, __cdecl, avfilter_graph_config_dont_call, AVFilterGraph *, void *)
-#if LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,0,0)
-  DEFINE_METHOD3(int, av_vsrc_buffer_add_frame, (AVFilterContext *p1, AVFrame *p2, int p3))
+#if (defined(LIBAVFILTER_FROM_LIBAV) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,5,0)) || \
+    (defined(LIBAVFILTER_FROM_FFMPEG) && LIBAVFILTER_VERSION_INT >= AV_VERSION_INT(3,43,100))
+  DEFINE_METHOD2(int, av_buffersrc_add_frame, (AVFilterContext *p1, AVFrame *p2))
 #else
   DEFINE_METHOD3(int, av_buffersrc_add_frame, (AVFilterContext *p1, AVFrame *p2, int p3))
 #endif
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   DEFINE_METHOD1(void, avfilter_unref_buffer, (AVFilterBufferRef *p1))
+#endif
   DEFINE_METHOD4(int, avfilter_link, (AVFilterContext *p1, unsigned p2, AVFilterContext *p3, unsigned p4))
+#if defined(LIBAVFILTER_AVFRAME_BASED)
+  DEFINE_FUNC_ALIGNED2(int                , __cdecl, av_buffersink_get_frame, AVFilterContext *, AVFrame *);
+#else
   DEFINE_FUNC_ALIGNED3(int                , __cdecl, av_buffersink_get_buffer_ref, AVFilterContext *, AVFilterBufferRef **, int);
+#endif
   DEFINE_FUNC_ALIGNED0(AVBufferSinkParams*, __cdecl, av_buffersink_params_alloc);
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
   DEFINE_FUNC_ALIGNED1(int                , __cdecl, av_buffersink_poll_frame, AVFilterContext *);
+#endif
 
   BEGIN_METHOD_RESOLVE()
-    RESOLVE_METHOD_RENAME(avfilter_open, avfilter_open_dont_call)
     RESOLVE_METHOD_RENAME(avfilter_free, avfilter_free_dont_call)
     RESOLVE_METHOD_RENAME(avfilter_graph_free, avfilter_graph_free_dont_call)
     RESOLVE_METHOD_RENAME(avfilter_register_all, avfilter_register_all_dont_call)
@@ -193,18 +251,26 @@
     RESOLVE_METHOD(avfilter_graph_alloc)
     RESOLVE_METHOD_RENAME(avfilter_inout_alloc, avfilter_inout_alloc_dont_call)
     RESOLVE_METHOD_RENAME(avfilter_inout_free, avfilter_inout_free_dont_call)
+#if defined(HAVE_AVFILTER_GRAPH_PARSE_PTR)
+    RESOLVE_METHOD_RENAME(avfilter_graph_parse_ptr, avfilter_graph_parse_ptr_dont_call)
+#else
     RESOLVE_METHOD_RENAME(avfilter_graph_parse, avfilter_graph_parse_dont_call)
     RESOLVE_METHOD_RENAME(avfilter_graph_config, avfilter_graph_config_dont_call)
-#if LIBAVFILTER_VERSION_INT < AV_VERSION_INT(3,0,0)
-    RESOLVE_METHOD(av_vsrc_buffer_add_frame)
-#else
     RESOLVE_METHOD(av_buffersrc_add_frame)
 #endif
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
     RESOLVE_METHOD(avfilter_unref_buffer)
+#endif
     RESOLVE_METHOD(avfilter_link)
+#if defined(LIBAVFILTER_AVFRAME_BASED)
+    RESOLVE_METHOD(av_buffersink_get_frame)
+#else
     RESOLVE_METHOD(av_buffersink_get_buffer_ref)
+#endif
     RESOLVE_METHOD(av_buffersink_params_alloc)
+#if !defined(LIBAVFILTER_AVFRAME_BASED)
     RESOLVE_METHOD(av_buffersink_poll_frame)
+#endif
   END_METHOD_RESOLVE()
 
   /* dependencies of libavfilter */
@@ -213,11 +279,6 @@
   DllAvFormat m_dllAvFormat;
 
 public:
-  int avfilter_open(AVFilterContext **filter_ctx, AVFilter *filter, const char *inst_name)
-  {
-    CSingleLock lock(DllAvCodec::m_critSection);
-    return avfilter_open_dont_call(filter_ctx, filter, inst_name);
-  }
   void avfilter_free(AVFilterContext *filter)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
@@ -238,11 +299,25 @@
     CSingleLock lock(DllAvCodec::m_critSection);
     return avfilter_inout_alloc_dont_call();
   }
+#if defined(HAVE_AVFILTER_GRAPH_PARSE_PTR)
+  int avfilter_graph_parse_ptr(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)
+  {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    return avfilter_graph_parse_ptr_dont_call(graph, filters, inputs, outputs, log_ctx);
+  }
+#elif defined(AVFILTER_GRAPH_PARSE_TAKES_PTR_PTR_ARG)
   int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut **inputs, AVFilterInOut **outputs, void *log_ctx)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
     return avfilter_graph_parse_dont_call(graph, filters, inputs, outputs, log_ctx);
   }
+#else
+  int avfilter_graph_parse(AVFilterGraph *graph, const char *filters, AVFilterInOut *inputs, AVFilterInOut *outputs, void *log_ctx)
+  {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    return avfilter_graph_parse_dont_call(graph, filters, inputs, outputs, log_ctx);
+  }
+#endif
   void avfilter_inout_free(AVFilterInOut **inout)
   {
     CSingleLock lock(DllAvCodec::m_critSection);
diff -u a/lib/DllAvFormat.h b/lib/DllAvFormat.h
--- a/lib/DllAvFormat.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllAvFormat.h	2015-03-12 20:48:25.110096999 +0100
@@ -54,6 +54,10 @@
 #define AVSEEK_FORCE 0x20000
 #endif
 
+#if LIBAVFORMAT_VERSION_INT >= AV_VERSION_INT(55,12,100)
+#define AVFORMAT_HAS_STREAM_GET_R_FRAME_RATE
+#endif
+
 typedef int64_t offset_t;
 
 class DllAvFormatInterface
@@ -61,6 +65,8 @@
 public:
   virtual ~DllAvFormatInterface() {}
   virtual void av_register_all_dont_call(void)=0;
+  virtual void avformat_network_init_dont_call(void)=0;
+  virtual void avformat_network_deinit_dont_call(void)=0;
   virtual AVInputFormat *av_find_input_format(const char *short_name)=0;
   virtual int url_feof(AVIOContext *s)=0;
   virtual void avformat_close_input(AVFormatContext **s)=0;
@@ -93,6 +99,7 @@
   virtual void avio_wb32(AVIOContext *s, unsigned int val)=0;
   virtual void avio_wb16(AVIOContext *s, unsigned int val)=0;
   virtual AVFormatContext *avformat_alloc_context(void)=0;
+  virtual int avformat_alloc_output_context2(AVFormatContext **ctx, AVOutputFormat *oformat, const char *format_name, const char *filename) = 0;
   virtual AVStream *avformat_new_stream(AVFormatContext *s, AVCodec *c)=0;
   virtual AVOutputFormat *av_guess_format(const char *short_name, const char *filename, const char *mime_type)=0;
   virtual int avformat_write_header (AVFormatContext *s, AVDictionary **options)=0;
@@ -102,6 +109,9 @@
   /* PLEX */
   virtual int64_t avio_size(AVIOContext *s)=0;
   /* END PLEX */
+#if defined(AVFORMAT_HAS_STREAM_GET_R_FRAME_RATE)
+  virtual AVRational av_stream_get_r_frame_rate(const AVStream *s)=0;
+#endif
 };
 
 #if (defined USE_EXTERNAL_FFMPEG) || (defined TARGET_DARWIN) 
@@ -117,6 +127,8 @@
     return ::av_register_all();
   } 
   virtual void av_register_all_dont_call() { *(volatile int* )0x0 = 0; } 
+  virtual void avformat_network_init_dont_call() { *(volatile int* )0x0 = 0; } 
+  virtual void avformat_network_deinit_dont_call() { *(volatile int* )0x0 = 0; } 
   virtual AVInputFormat *av_find_input_format(const char *short_name) { return ::av_find_input_format(short_name); }
   virtual int url_feof(AVIOContext *s) { return ::url_feof(s); }
   virtual void avformat_close_input(AVFormatContext **s) { ::avformat_close_input(s); }
@@ -152,11 +164,15 @@
   virtual void avio_wb32(AVIOContext *s, unsigned int val) { ::avio_wb32(s, val); }
   virtual void avio_wb16(AVIOContext *s, unsigned int val) { ::avio_wb16(s, val); }
   virtual AVFormatContext *avformat_alloc_context() { return ::avformat_alloc_context(); }
+  virtual int avformat_alloc_output_context2(AVFormatContext **ctx, AVOutputFormat *oformat, const char *format_name, const char *filename){ return ::avformat_alloc_output_context2(ctx,oformat,format_name,filename); }
   virtual AVStream *avformat_new_stream(AVFormatContext *s, AVCodec *c) { return ::avformat_new_stream(s, c); }
   virtual AVOutputFormat *av_guess_format(const char *short_name, const char *filename, const char *mime_type) { return ::av_guess_format(short_name, filename, mime_type); }
   virtual int avformat_write_header (AVFormatContext *s, AVDictionary **options) { return ::avformat_write_header (s, options); }
   virtual int av_write_trailer(AVFormatContext *s) { return ::av_write_trailer(s); }
   virtual int av_write_frame  (AVFormatContext *s, AVPacket *pkt) { return ::av_write_frame(s, pkt); }
+#if defined(AVFORMAT_HAS_STREAM_GET_R_FRAME_RATE)
+  virtual AVRational av_stream_get_r_frame_rate(const AVStream *s) { return ::av_stream_get_r_frame_rate(s); }
+#endif
 
   /* PLEX */
   virtual int64_t avio_size(AVIOContext *s) { return ::avio_size(s); }
@@ -168,9 +184,19 @@
 #if !defined(TARGET_DARWIN)
     CLog::Log(LOGDEBUG, "DllAvFormat: Using libavformat system library");
 #endif
+    CSingleLock lock(DllAvCodec::m_critSection);
+    if (++m_avformat_refcnt == 1)
+      ::avformat_network_init();
     return true;
   }
-  virtual void Unload() {}
+  virtual void Unload() {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    if (--m_avformat_refcnt == 0)
+      ::avformat_network_deinit();
+  }
+
+protected:
+  static int m_avformat_refcnt;
 };
 
 #else
@@ -182,6 +208,8 @@
   LOAD_SYMBOLS()
 
   DEFINE_METHOD0(void, av_register_all_dont_call)
+  DEFINE_METHOD0(void, avformat_network_init_dont_call)
+  DEFINE_METHOD0(void, avformat_network_deinit_dont_call)
   DEFINE_METHOD1(AVInputFormat*, av_find_input_format, (const char *p1))
   DEFINE_METHOD1(int, url_feof, (AVIOContext *p1))
   DEFINE_METHOD1(void, avformat_close_input, (AVFormatContext **p1))
@@ -212,6 +240,7 @@
   DEFINE_METHOD2(int, avio_close_dyn_buf, (AVIOContext *p1, uint8_t **p2))
   DEFINE_METHOD3(offset_t, avio_seek, (AVIOContext *p1, offset_t p2, int p3))
   DEFINE_METHOD0(AVFormatContext *, avformat_alloc_context)
+  DEFINE_METHOD4(int, avformat_alloc_output_context2, (AVFormatContext **p1, AVOutputFormat *p2, const char *p3, const char *p4))
   DEFINE_METHOD2(AVStream *, avformat_new_stream, (AVFormatContext *p1, AVCodec *p2))
   DEFINE_METHOD3(AVOutputFormat *, av_guess_format, (const char *p1, const char *p2, const char *p3))
   DEFINE_METHOD2(int, avformat_write_header , (AVFormatContext *p1, AVDictionary **p2))
@@ -220,8 +249,13 @@
   /* PLEX */
   DEFINE_METHOD1(int64_t, avio_size, (AVIOContext *p1))
   /* END PLEX */
+#if defined(AVFORMAT_HAS_STREAM_GET_R_FRAME_RATE)
+  DEFINE_METHOD1(AVRational, av_stream_get_r_frame_rate, (const AVStream *p1))
+#endif
   BEGIN_METHOD_RESOLVE()
     RESOLVE_METHOD_RENAME(av_register_all, av_register_all_dont_call)
+    RESOLVE_METHOD_RENAME(avformat_network_init,   avformat_network_init_dont_call)
+    RESOLVE_METHOD_RENAME(avformat_network_deinit, avformat_network_deinit_dont_call)
     RESOLVE_METHOD(av_find_input_format)
     RESOLVE_METHOD(url_feof)
     RESOLVE_METHOD(avformat_close_input)
@@ -249,6 +283,7 @@
     RESOLVE_METHOD(avio_wb32)
     RESOLVE_METHOD(avio_wb16)
     RESOLVE_METHOD(avformat_alloc_context)
+    RESOLVE_METHOD(avformat_alloc_output_context2)
     RESOLVE_METHOD(avformat_new_stream)
     RESOLVE_METHOD(av_guess_format)
     RESOLVE_METHOD(avformat_write_header)
@@ -257,6 +292,9 @@
     /* PLEX */
     RESOLVE_METHOD(avio_size)
     /* END PLEX */
+#if defined(AVFORMAT_HAS_STREAM_GET_R_FRAME_RATE)
+    RESOLVE_METHOD(av_stream_get_r_frame_rate)
+#endif
   END_METHOD_RESOLVE()
 
   /* dependencies of libavformat */
@@ -277,10 +315,26 @@
 
   virtual bool Load()
   {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    if (++m_avformat_refcnt == 1)
+      avformat_network_init_dont_call();
+
     if (!m_dllAvCodec.Load())
       return false;
     return DllDynamic::Load();
   }
+
+  virtual void Unload()
+  {
+    CSingleLock lock(DllAvCodec::m_critSection);
+    if (--m_avformat_refcnt == 0)
+      avformat_network_deinit_dont_call();
+
+    DllDynamic::Unload();
+  }
+
+protected:
+  static int m_avformat_refcnt;
 };
 
 #endif
diff -u a/lib/DllAvUtil.h b/lib/DllAvUtil.h
--- a/lib/DllAvUtil.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllAvUtil.h	2015-03-12 20:48:25.110096999 +0100
@@ -1,7 +1,7 @@
 #pragma once
 /*
- *      Copyright (C) 2005-2010 Team XBMC
- *      http://www.xbmc.org
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
  *
  *  This Program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -14,10 +14,8 @@
  *  GNU General Public License for more details.
  *
  *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, write to the Free
- *  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
- *  Boston, MA  02110-1301, USA.
- *  http://www.gnu.org/copyleft/gpl.html
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
  *
  */
 
@@ -34,41 +32,20 @@
 
 extern "C" {
 #if (defined USE_EXTERNAL_FFMPEG)
-  #if (defined HAVE_LIBAVUTIL_AVUTIL_H)
-    #include <libavutil/avutil.h>
-    // for av_get_default_channel_layout
-    #include <libavutil/audioconvert.h>
-    #include <libavutil/crc.h>
-    #include <libavutil/fifo.h>
-    // for enum AVSampleFormat
-    #include <libavutil/samplefmt.h>
-    // for LIBAVCODEC_VERSION_INT:
-    #include <libavcodec/avcodec.h>
-  #elif (defined HAVE_FFMPEG_AVUTIL_H)
-    #include <ffmpeg/avutil.h>
-    // for av_get_default_channel_layout
-    #include <ffmpeg/audioconvert.h>
-    #include <ffmpeg/crc.h>
-    #include <ffmpeg/fifo.h>
-    // for enum AVSampleFormat
-    #include <ffmpeg/samplefmt.h>
-    // for LIBAVCODEC_VERSION_INT:
-    #include <ffmpeg/avcodec.h>
-  #endif
-  #if defined(HAVE_LIBAVUTIL_OPT_H)
-    #include <libavutil/opt.h>
-  #elif defined(HAVE_LIBAVCODEC_AVCODEC_H)
-    #include <libavcodec/opt.h>
-  #else
-    #include <ffmpeg/opt.h>
-  #endif
-  #if defined(HAVE_LIBAVUTIL_MEM_H)
-    #include <libavutil/mem.h>
-  #else
-    #include <ffmpeg/mem.h>
-  #endif
-  #if (defined HAVE_LIBAVUTIL_MATHEMATICS_H)
-    #include <libavutil/mathematics.h>
+  #include <libavutil/avutil.h>
+  // for av_get_default_channel_layout
+  #include <libavutil/audioconvert.h>
+  #include <libavutil/crc.h>
+  #include <libavutil/fifo.h>
+  // for LIBAVCODEC_VERSION_INT:
+  #include <libavcodec/avcodec.h>
+  // for enum AVSampleFormat
+  #include <libavutil/samplefmt.h>
+  #include <libavutil/opt.h>
+  #include <libavutil/mem.h>
+  #include <libavutil/mathematics.h>
+  #if (defined USE_LIBAV_HACKS)
+    #include "xbmc-libav-hacks/libav_hacks.h"
   #endif
 #else
   #include "libavutil/avutil.h"
@@ -83,6 +60,10 @@
 #endif
 }
 
+#if LIBAVUTIL_VERSION_INT >= AV_VERSION_INT(52,29,100)
+#define AVFRAME_IN_LAVU
+#endif
+
 #ifndef __GNUC__
 #pragma warning(pop)
 #endif
@@ -106,6 +87,8 @@
   virtual const AVCRC* av_crc_get_table(AVCRCId crc_id)=0;
   virtual uint32_t av_crc(const AVCRC *ctx, uint32_t crc, const uint8_t *buffer, size_t length)=0;
   virtual int av_opt_set(void *obj, const char *name, const char *val, int search_flags)=0;
+  virtual int av_opt_set_double(void *obj, const char *name, double val, int search_flags)=0;
+  virtual int av_opt_set_int(void *obj, const char *name, int64_t val, int search_flags)=0;
   virtual AVFifoBuffer *av_fifo_alloc(unsigned int size) = 0;
   virtual void av_fifo_free(AVFifoBuffer *f) = 0;
   virtual void av_fifo_reset(AVFifoBuffer *f) = 0;
@@ -119,6 +102,18 @@
   virtual void av_dict_free(AVDictionary **pm) = 0;
   virtual int av_samples_get_buffer_size (int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align) = 0;
   virtual int64_t av_get_default_channel_layout(int nb_channels)=0;
+  virtual int av_samples_alloc(uint8_t **audio_data, int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align) = 0;
+  virtual int av_sample_fmt_is_planar(enum AVSampleFormat sample_fmt) = 0;
+  virtual int av_get_channel_layout_channel_index (uint64_t channel_layout, uint64_t channel) = 0;
+  virtual int av_samples_fill_arrays(uint8_t **audio_data, int *linesize, const uint8_t *buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align) = 0;
+  virtual int av_samples_copy(uint8_t **dst, uint8_t *const *src, int dst_offset, int src_offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt) = 0;
+  virtual uint64_t av_channel_layout_extract_channel(uint64_t channel_layout, int index) = 0;
+#if defined(AVFRAME_IN_LAVU)
+  virtual void av_frame_free(AVFrame **frame)=0;
+  virtual AVFrame *av_frame_alloc(void)=0;
+  virtual void av_frame_unref(AVFrame *frame)=0;
+  virtual void av_frame_move_ref(AVFrame *dst, AVFrame *src)=0;
+#endif
 };
 
 #if defined (USE_EXTERNAL_FFMPEG) || (defined TARGET_DARWIN)
@@ -140,6 +135,8 @@
    virtual const AVCRC* av_crc_get_table(AVCRCId crc_id) { return ::av_crc_get_table(crc_id); }
    virtual uint32_t av_crc(const AVCRC *ctx, uint32_t crc, const uint8_t *buffer, size_t length) { return ::av_crc(ctx, crc, buffer, length); }
    virtual int av_opt_set(void *obj, const char *name, const char *val, int search_flags) { return ::av_opt_set(obj, name, val, search_flags); }
+   virtual int av_opt_set_double(void *obj, const char *name, double val, int search_flags) { return ::av_opt_set_double(obj, name, val, search_flags); }
+   virtual int av_opt_set_int(void *obj, const char *name, int64_t val, int search_flags) { return ::av_opt_set_int(obj, name, val, search_flags); }
   virtual AVFifoBuffer *av_fifo_alloc(unsigned int size) {return ::av_fifo_alloc(size); }
   virtual void av_fifo_free(AVFifoBuffer *f) { ::av_fifo_free(f); }
   virtual void av_fifo_reset(AVFifoBuffer *f) { ::av_fifo_reset(f); }
@@ -157,6 +154,22 @@
   virtual int av_samples_get_buffer_size (int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)
     { return ::av_samples_get_buffer_size(linesize, nb_channels, nb_samples, sample_fmt, align); }
   virtual int64_t av_get_default_channel_layout(int nb_channels) { return ::av_get_default_channel_layout(nb_channels); }
+  virtual int av_samples_alloc(uint8_t **audio_data, int *linesize, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)
+    { return ::av_samples_alloc(audio_data, linesize, nb_channels, nb_samples, sample_fmt, align); }
+  virtual int av_sample_fmt_is_planar(enum AVSampleFormat sample_fmt) { return ::av_sample_fmt_is_planar(sample_fmt); }
+  virtual int av_get_channel_layout_channel_index (uint64_t channel_layout, uint64_t channel) { return ::av_get_channel_layout_channel_index(channel_layout, channel); }
+  virtual int av_samples_fill_arrays(uint8_t **audio_data, int *linesize, const uint8_t *buf, int nb_channels, int nb_samples, enum AVSampleFormat sample_fmt, int align)
+    { return ::av_samples_fill_arrays(audio_data, linesize, buf, nb_channels, nb_samples, sample_fmt, align); }
+  virtual int av_samples_copy(uint8_t **dst, uint8_t *const *src, int dst_offset, int src_offset, int nb_samples, int nb_channels, enum AVSampleFormat sample_fmt)
+    { return ::av_samples_copy(dst, src, dst_offset, src_offset, nb_samples, nb_channels, sample_fmt); }
+  virtual uint64_t av_channel_layout_extract_channel(uint64_t channel_layout, int index)
+    { return ::av_channel_layout_extract_channel(channel_layout, index); }
+#if defined(AVFRAME_IN_LAVU)
+  virtual void av_frame_free(AVFrame **frame) { return ::av_frame_free(frame); }
+  virtual AVFrame *av_frame_alloc() { return ::av_frame_alloc(); }
+  virtual void av_frame_unref(AVFrame *frame) { return ::av_frame_unref(frame); }
+  virtual void av_frame_move_ref(AVFrame *dst, AVFrame *src) { return ::av_frame_move_ref(dst,src); }
+#endif
 
    // DLL faking.
    virtual bool ResolveExports() { return true; }
@@ -189,6 +202,8 @@
   DEFINE_METHOD5(int, av_crc_init, (AVCRC *p1, int p2, int p3, uint32_t p4, int p5));
   DEFINE_METHOD4(uint32_t, av_crc, (const AVCRC *p1, uint32_t p2, const uint8_t *p3, size_t p4));
   DEFINE_METHOD4(int, av_opt_set, (void *p1, const char *p2, const char *p3, int p4));
+  DEFINE_METHOD4(int, av_opt_set_double, (void *p1, const char *p2, double p3, int p4))
+  DEFINE_METHOD4(int, av_opt_set_int, (void *p1, const char *p2, int64_t p3, int p4))
   DEFINE_METHOD1(AVFifoBuffer*, av_fifo_alloc, (unsigned int p1))
   DEFINE_METHOD1(void, av_fifo_free, (AVFifoBuffer *p1))
   DEFINE_METHOD1(void, av_fifo_reset, (AVFifoBuffer *p1))
@@ -202,6 +217,18 @@
   DEFINE_METHOD1(void, av_dict_free, (AVDictionary **p1));
   DEFINE_METHOD5(int, av_samples_get_buffer_size, (int *p1, int p2, int p3, enum AVSampleFormat p4, int p5))
   DEFINE_METHOD1(int64_t, av_get_default_channel_layout, (int p1))
+  DEFINE_METHOD6(int, av_samples_alloc, (uint8_t **p1, int *p2, int p3, int p4, enum AVSampleFormat p5, int p6))
+  DEFINE_METHOD1(int, av_sample_fmt_is_planar, (enum AVSampleFormat p1))
+  DEFINE_METHOD2(int, av_get_channel_layout_channel_index, (uint64_t p1, uint64_t p2))
+  DEFINE_METHOD7(int, av_samples_fill_arrays, (uint8_t **p1, int *p2, const uint8_t *p3, int p4, int p5, enum AVSampleFormat p6, int p7))
+  DEFINE_METHOD7(int, av_samples_copy, (uint8_t **p1, uint8_t *const *p2, int p3, int p4, int p5, int p6, enum AVSampleFormat p7))
+  DEFINE_METHOD2(uint64_t, av_channel_layout_extract_channel, (uint64_t p1, int p2))
+#if defined(AVFRAME_IN_LAVU)
+  DEFINE_METHOD1(void, av_frame_free, (AVFrame **p1))
+  DEFINE_METHOD0(AVFrame *, av_frame_alloc)
+  DEFINE_METHOD1(void, av_frame_unref, (AVFrame *p1))
+  DEFINE_METHOD2(void, av_frame_move_ref, (AVFrame *p1, AVFrame* p2))
+#endif
 
   public:
   BEGIN_METHOD_RESOLVE()
@@ -217,6 +244,8 @@
     RESOLVE_METHOD(av_crc_get_table)
     RESOLVE_METHOD(av_crc)
     RESOLVE_METHOD(av_opt_set)
+    RESOLVE_METHOD(av_opt_set_double)
+    RESOLVE_METHOD(av_opt_set_int)
     RESOLVE_METHOD(av_fifo_alloc)
     RESOLVE_METHOD(av_fifo_free)
     RESOLVE_METHOD(av_fifo_reset)
@@ -230,6 +259,18 @@
     RESOLVE_METHOD(av_dict_free)
     RESOLVE_METHOD(av_samples_get_buffer_size)
     RESOLVE_METHOD(av_get_default_channel_layout)
+    RESOLVE_METHOD(av_samples_alloc)
+    RESOLVE_METHOD(av_sample_fmt_is_planar)
+    RESOLVE_METHOD(av_get_channel_layout_channel_index)
+    RESOLVE_METHOD(av_samples_fill_arrays)
+    RESOLVE_METHOD(av_samples_copy)
+    RESOLVE_METHOD(av_channel_layout_extract_channel)
+#if defined(AVFRAME_IN_LAVU)
+    RESOLVE_METHOD(av_frame_free)
+    RESOLVE_METHOD(av_frame_alloc)
+    RESOLVE_METHOD(av_frame_unref)
+    RESOLVE_METHOD(av_frame_move_ref)
+#endif
   END_METHOD_RESOLVE()
 };
 
diff -u a/lib/DllPostProc.h b/lib/DllPostProc.h
--- a/lib/DllPostProc.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllPostProc.h	2015-03-12 20:48:25.110096999 +0100
@@ -39,16 +39,8 @@
 #endif
   
 #if (defined USE_EXTERNAL_FFMPEG)
-  #if (defined HAVE_LIBAVUTIL_AVUTIL_H)
-    #include <libavutil/avutil.h>
-  #elif (defined HAVE_FFMPEG_AVUTIL_H)
-    #include <ffmpeg/avutil.h>
-  #endif
-  #if (defined HAVE_LIBPOSTPROC_POSTPROCESS_H)
-    #include <libpostproc/postprocess.h>
-  #elif (defined HAVE_POSTPROC_POSTPROCESS_H)
-    #include <postproc/postprocess.h>
-  #endif
+  #include <libavutil/avutil.h>
+  #include <libpostproc/postprocess.h>
 #else
   #include "libavutil/avutil.h"
   #include "libpostproc/postprocess.h"
diff -u a/lib/DllSwScale.h b/lib/DllSwScale.h
--- a/lib/DllSwScale.h	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/DllSwScale.h	2015-03-12 20:48:25.110096999 +0100
@@ -45,11 +45,7 @@
 #endif
 
 #if (defined USE_EXTERNAL_FFMPEG)
-  #if (defined HAVE_LIBSWSCALE_SWSCALE_H)
-    #include <libswscale/swscale.h>
-  #elif (defined HAVE_FFMPEG_SWSCALE_H)
-    #include <ffmpeg/swscale.h>
-  #endif
+  #include <libswscale/swscale.h>
 #else
   #include "libswscale/swscale.h"
 #endif
diff -u a/lib/Makefile.in b/lib/Makefile.in
--- a/lib/Makefile.in	2015-03-12 20:52:39.942096999 +0100
+++ b/lib/Makefile.in	2015-03-12 20:48:25.114096999 +0100
@@ -75,7 +75,9 @@
 ffmpeg:
 	$(MAKE) -C $@
 ifeq ($(findstring osx,$(ARCH)), osx)
-	-$(AR) d ffmpeg/libavcodec/libavcodec.a inverse.o
+	-$(AR) d ffmpeg/libavcodec/libavcodec.a log2_tab.o
+	-$(AR) d ffmpeg/libavformat/libavformat.a log2_tab.o
+	-$(AR) d ffmpeg/libswresample/libswresample.a log2_tab.o
 endif
 
 clean:
